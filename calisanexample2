import { reactWidget } from "reactR";
import React, { useState, useRef, useEffect } from "react";
import { DragDropContext, Droppable, Draggable } from "react-beautiful-dnd";

function KanbanBoard({ data, elementId: initialElementId }) {
  const [lists, setLists] = useState(data || {});
  const rootElement = useRef(null);

  const elementIdRef = useRef(initialElementId);

  useEffect(() => {
   if (window.Shiny) {
        elementIdRef.current = rootElement.current.parentElement.getAttribute("data-kanban-output");

        window.Shiny.addCustomMessageHandler(elementIdRef.current , (newData) => {
          console.log("Custom message received from Shiny:", newData);
          setLists(newData.data || {});
          const uniqueData = {
            ...newData.data,
            _timestamp: new Date().getTime(),
          };
          window.Shiny.setInputValue(     elementIdRef.current,uniqueData);

        });
      }
    }, []);

  useEffect(() => {
    if (data) {
      console.log("Received updated data from Shiny:", data);
      setLists(data);
    }
  }, [data]);

  useEffect(() => {
    if (!elementIdRef.current && rootElement.current) {
      elementIdRef.current = rootElement.current.parentElement.getAttribute("data-kanban-output");
      console.log("Fallback Element ID:", elementIdRef.current);
    }

    if (!elementIdRef.current) {
      console.error("Element ID is missing. Shiny updates will not work.");
    }
  }, []);
  const deleteTask = (listId, taskId) => {
  const taskName = lists[listId].items.find((item) => item.id === taskId)?.content;
  const listName = lists[listId]?.name;

  if (window.confirm(`Are you sure to delete "${taskName}" in "${listName}"?`)) {
    const updatedItems = lists[listId].items.filter((item) => item.id !== taskId);

    const updatedLists = {
      ...lists,
      [listId]: {
        ...lists[listId],
        items: updatedItems,
      },
    };

    setLists(updatedLists); // Update React state
    updateShiny(updatedLists); // Send updated data to Shiny
  }
};

  const updateShiny = (updatedLists) => {
    const currentElementId =
      elementIdRef.current || rootElement.current?.parentElement.getAttribute("data-kanban-output");

    if (window.Shiny && currentElementId) {
      const uniqueData = {
        ...updatedLists,
        _timestamp: new Date().getTime(), // Benzersiz bir zaman damgası ekliyoruz
      };
      console.log("Sending data to Shiny:", uniqueData);
      window.Shiny.setInputValue(currentElementId, uniqueData);
    } else {
      console.warn("Shiny environment or elementId not found.");
    }
  };


  const onDragEnd = (result) => {
    const { source, destination } = result;

    // Eğer hedef yoksa işlemi iptal et
    if (!destination) return;

    // Eğer kaynak ve hedef aynı listeyse işlemi iptal et
    if (source.droppableId === destination.droppableId) {
      console.log("Same list - no update triggered.");
      return;
    }

    // Farklı listelere taşındığında işlem yap
    const sourceColumn = lists[source.droppableId];
    const destColumn = lists[destination.droppableId];
    const sourceItems = Array.from(sourceColumn.items);
    const destItems = Array.from(destColumn.items);

    // Öğeyi kaynak sütundan çıkar ve hedef sütuna ekle
    const [moved] = sourceItems.splice(source.index, 1);
    destItems.splice(destination.index, 0, moved);

    const updatedLists = {
      ...lists,
      [source.droppableId]: { ...sourceColumn, items: sourceItems },
      [destination.droppableId]: { ...destColumn, items: destItems },
    };

    setLists(updatedLists); // React state güncelle
    updateShiny(updatedLists); // Shiny'ye gönder
  };

  return (
    <div ref={rootElement}>
      <DragDropContext onDragEnd={onDragEnd}>
        <div className="kanban-board row">
          {Object.entries(lists).map(([listId, list]) => (
            <Droppable key={listId} droppableId={listId}>
              {(provided) => (
                <div
                  ref={provided.innerRef}
                  {...provided.droppableProps}
                  className="col-md-4 mb-3"
                >
                  <div className="card border-primary shadow-sm kanban-column">
                    <div className="card-header bg-primary text-white">
                      <h5 className="mb-0">{list.name}</h5>
                    </div>
                    <div className="card-body bg-light">
                     {list.items.map((item, index) => (
                          <Draggable key={item.id} draggableId={item.id} index={index}>
                            {(provided) => (
                              <div
                                ref={provided.innerRef}
                                {...provided.draggableProps}
                                {...provided.dragHandleProps}
                                className="card mb-2 shadow-sm kanban-item"
                              >
                                <div className="card-body d-flex justify-content-between align-items-center">
                                  <p className="card-text mb-0">{item.content}</p>
                                  <button
                                    className="btn btn-danger btn-sm"
                                    onClick={() => deleteTask(listId, item.id)}
                                  >
                                    🗑️
                                  </button>
                                </div>
                              </div>
                            )}
                          </Draggable>
                        ))}
                      {provided.placeholder}
                    </div>
                  </div>
                </div>
              )}
            </Droppable>
          ))}
        </div>
      </DragDropContext>
    </div>
  );
}

reactWidget("kanbanR", "output", { KanbanBoard });


#' Kanban Board Widget
#'
#' Creates a Kanban Board for visualization and interaction.
#'
#' @param data A list representing the Kanban board structure.
#' @param width The width of the widget. Must be a valid CSS unit or `NULL`.
#' @param height The height of the widget. Must be a valid CSS unit or `NULL`.
#' @param elementId An optional ID for the widget element.
#'
#' @import htmlwidgets
#' @export
kanbanR <- function(data, width = NULL, height = NULL, elementId = NULL) {
  if (missing(data)) {
    stop("`data` must be provided to render the Kanban board.")
  }

  # React component
  component <- reactR::reactMarkup(
    htmltools::tag("KanbanBoard", list(data = data, elementId = elementId))
  )

  # Create widget
  htmlwidgets::createWidget(
    name = "kanbanR",
    component,
    width = width,
    height = height,
    package = "kanbanR",
    elementId = elementId
  )
}

#' Called by HTMLWidgets to produce the widget's root element.
#' @noRd
widget_html.kanbanR <- function(id, style, class, ...) {
  htmltools::tagList(
    reactR::html_dependency_corejs(),
    reactR::html_dependency_react(),
    reactR::html_dependency_reacttools(),
    htmltools::tags$div(id = id, class = class, style = style)
  )
}
#
# update_kanban_board <- function(session, inputId, value, configuration = NULL) {
#   message <- list(value = value)
#   if (!is.null(configuration)) {
#     message$configuration <- configuration
#   }
#   session$sendInputMessage(inputId, message)
# }


is.tag <- function(x) {
  inherits(x, "shiny.tag")
}

isTagList <- function(x) {
  inherits(x, "shiny.tag.list") || (is.list(x) && all(sapply(x, is.tag)))
}


#' Shiny bindings for Kanban Board
#'
#' Output and render functions for using Kanban Board within Shiny
#' applications and interactive Rmd documents.
#'
#' @param outputId Output variable to read from.
#' @param width,height Must be a valid CSS unit (like \code{'100\%'}, \code{'400px'}, \code{'auto'})
#'   or a number, which will be coerced to a string and have \code{'px'} appended.
#' @param expr An expression that generates a Kanban Board.
#' @param env The environment in which to evaluate \code{expr}.
#' @param quoted Is \code{expr} a quoted expression (with \code{quote()})? This
#'   is useful if you want to save an expression in a variable.
#'
#' @name kanbanR-shiny
#' @export
kanbanROutput <- function(outputId, width = "100%", height = "400px") {
  output <- htmlwidgets::shinyWidgetOutput(outputId, "kanbanR", width, height, package = "kanbanR")
  # Add attribute to Shiny output containers to differentiate them from static widgets
  addOutputId <- function(x) {
    if (isTagList(x)) {
      x[] <- lapply(x, addOutputId)
    } else if (is.tag(x)) {
      x <- htmltools::tagAppendAttributes(x, "data-kanban-output" = outputId)
    }
    x
  }
  output <- addOutputId(output)
  print(output)
  output
}

#' @rdname kanbanR-shiny
#' @export
renderKanbanR <- function(expr, env = parent.frame(), quoted = FALSE) {
  if (!quoted) { expr <- substitute(expr) } # Force quoted expression
  htmlwidgets::shinyRenderWidget(expr, kanbanROutput, env, quoted = TRUE)
}


#' @export
updateKanban <- function(session, inputId, data) {
  session$sendCustomMessage(inputId, list(data = data))
}

library(shiny)
library(kanbanR)
library(bslib)
ui <- page_fluid(
  titlePanel("Kanban Board Test"),
  textInput("new_list_name", "New List Name:", ""),
  actionButton("add_list", "Add List"),
  textInput("new_task_name", "New Task Name:", ""),
  selectInput("select_list", "Select List:", choices = NULL),
  actionButton("add_task", "Add Task"),
  kanbanROutput("kanban_board")
)



server <- function(input, output, session) {
  kanban_data <- reactiveVal(list(
    todo = list(name = "To Do", items = list(
      list(id = "1", content = "Task 1"),
      list(id = "2", content = "Task 2")
    )),
    inProgress = list(name = "In Progress", items = list(
      list(id = "3", content = "Task 3")
    ))
  )
  )


  # Liste seçim kutusunu güncelle

  observeEvent(input$kanban_board, {
    new_list <- input$kanban_board
    new_list$`_timestamp` <- NULL
    kanban_data(new_list)
  })


  observe({
    current_data <- kanban_data()
    choices <- setNames(names(current_data), sapply(current_data, function(list) list$name))
    updateSelectInput(session, "select_list", choices = choices)
  })
  # # Yeni liste ekle
  observeEvent(input$add_list, {
    new_list_name <- input$new_list_name
    if (new_list_name != "") {
      current_data <- kanban_data()

      # Liste adını doğrudan key olarak kullan
      current_data[[new_list_name]] <- list(
        name = new_list_name,
        items = list()
      )

      kanban_data(current_data)
      updateKanban(session, "kanban_board", data = current_data)
    }
  })
  #
  # # observe(print(input$kanban_board))
  #
  #
  # # Yeni görev ekle
  observeEvent(input$add_task, {
    new_task_name <- input$new_task_name
    selected_list <- input$select_list

    if (new_task_name != "" && selected_list %in% names(kanban_data())) {
      current_data <- kanban_data()
      new_task_id <- paste0("task_", Sys.time())
      current_data[[selected_list]]$items <- append(
        current_data[[selected_list]]$items,
        list(list(id = new_task_id, content = new_task_name))
      )
      kanban_data(current_data)
      updateKanban(session, "kanban_board", data = current_data)
    }
  })

  output$kanban_board <- renderKanbanR({

    message("rendering")
    kanbanR(data = kanban_data())
  })

}



shinyApp(ui, server)
